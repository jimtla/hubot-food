# Description:
#   Food for the masses
#
# Dependencies:
#   "ordrin-api": "0.1.96"
#
# Configuration:
#   None
#
# Commands:
#   food me - Start ordering food
#
# Author:
#   jimtla AND ryandm

_ = require 'underscore'

ordrinApi = require "ordrin-api"

ordrin = ordrinApi.init
  apiKey: "bs9lzpr3hEKefhah-okCW1Vbi8KGcHm5Rgce5Qfkmnc",
  servers: "test"

try
  address = new ordrin.Address "841 Broadway", "New York", "NY", 10014, 4014641931
catch e
  console.log e
  throw e

pretty_json = (object) -> JSON.stringify object, null, 4


new_state = ->
  restaurant: null
  orders: []
  confirmed: false

state = new_state()

join_non_empty = (separator, strings...) ->
  _(strings).without('').join separator

print_items = (items) ->
  lines = [
    "--------- Items ------------------"
    for item in items
      join_non_empty ' - ', item.name, item.descrip
  ]
  _(lines).flatten().join '\n'

print_restaurants = (restaurants) ->
  lines = [
    "---------- Restaurants -----------"
    for restaurant in restaurants
      join_non_empty ' - ', "#{restaurant.id}. #{restaurant.na}"
  ]
  _(lines).flatten().join '\n'

print_menu = (restaurant) ->
  lines = for category in restaurant.menu
    [
      ''
      join_non_empty ' - ', category.name, category.descrip
      "-----------------------------"
      for item in category.children
          join_non_empty ' - ', "#{item.id}. #{item.name}", item.descrip
    ]
  _(lines).flatten().join '\n'

print_order = (restaurant, orders) ->
  lines = [
    "Ordering from #{restaurant.name}"
    "Phone Number: #{restaurant.cs_contact_phone}"
    "------------ Orders -------------"
    for order, index in orders
      "#{index}.#{order.item.name} (Ordered by #{order.orderer})"
  ]
  _(lines).flatten().join '\n'

trayItem = (itemId, quantity) ->
  {
    itemId: parseInt itemId
    quantity: 1
  }

edit_distance = (str0, str1) ->
  score = []
  score[-1] = []
  score[-1][-1] = 0

  for char, idx in str0
    score[idx] = []
    score[idx][-1] = idx + 1

  for char, idx in str1
    score[-1][idx] = idx + 1

  for char0, idx0 in str0
    for char1, idx1 in str1
      score[idx0][idx1] =
        if char0 == char1
          score[idx0 - 1][idx1 - 1]
        else
          Math.min(
              score[idx0 - 1][idx1 - 1]
              score[idx0    ][idx1 - 1]
              score[idx0 - 1][idx1    ]
            ) + 1

  if false # Return back the grid for debug purposes
    output = "    " + ("  #{c} "for c in str0).join ''
    for ot, y in str0
        output += "\n  #{ot}"
        for oc, x in str1
            output += if score[x][y] >= 10 then '' else ' '
            output += " #{score[x][y]} "
    output
  else
    score[str0.length - 1][str1.length - 1]

filter = (keyword, choices, {max_dist, max_count} = {}) ->
  max_dist ?= 10
  max_count ?= 5

  keyword = keyword.toLowerCase()

  make_substrings = (choice) ->
    for index in [0...choice.length]
      prepend_hyphens = Math.max 0, 2 - index
      append_hyphens = Math.max 0, index + keyword.length + 2 - choice.length

      prepend = ('-' for i in [0...prepend_hyphens]).join ''
      append  = ('-' for i in [0...append_hyphens]).join ''

      prepend + choice[Math.max(index-2, 0)...Math.min(index + keyword.length + 2, choice.length)] + append

  scored =
    for choice in choices
      min_distance = Infinity
      console.log choice
      for substring in make_substrings choice.toLowerCase()
        distance = edit_distance "**#{keyword}**", substring
        console.log keyword, substring, distance
        if distance < min_distance
          min_distance = distance

      choice: choice
      distance: min_distance + choice.length/1000



  sorted = _(scored).sortBy ({distance}) -> distance

  _(sorted[0...max_count]).chain().
    filter(({distance}) -> distance < max_dist).
    pluck('choice').
    value()

module.exports = (robot) ->
  getObjFromFuzz = (fuzz, arrayOfObjWithIds, msg, pretty, c, getObjKeywords) ->
    keywordToIds = {}
    for o in arrayOfObjWithIds
      for k in getObjKeywords o
        keywordToIds[k] ||= []
        keywordToIds[k].push o.id
    matched = filter fuzz, (k for k of keywordToIds)
    ids = _.uniq [].concat (keywordToIds[k] for k in matched)...
    objs = (o for o in arrayOfObjWithIds when o.id in ids)
    if objs.length == 1
      c objs[0]
    else if objs.length == 0
      msg.reply "I can't find anything like `#{fuzz}` - try something else?"
    else
      reply = "#{objs.length} matches for `#{fuzz}` - be more specific?\n"
      reply += pretty objs
      msg.reply reply
  getRestaurantFromFuzz = (fuzz, restaurants, msg, pretty, c) ->
    getObjFromFuzz fuzz, restaurants, msg, pretty, c,
      (r) -> [r.na ? ''].concat (r.cu ? [])
  getItemFromFuzz = (fuzz, menu, msg, pretty, c) ->
    getObjFromFuzz fuzz, (_.flatten _.pluck menu, 'children'), msg, pretty, c,
      (i) -> [i.name]

  unlessErr = (msg, c) ->
    (err, response) -> if err then msg.reply pretty_json err else c response

  robot.respond /fuzz me ([^ ]*) (.*)/i, (msg) ->
    restaurant_id = msg.match[1]
    ordrin.restaurant.getDetails restaurant_id, unlessErr msg,
      (res) -> getItemFromFuzz msg.match[2], res.menu, msg, print_items,
        (item) -> msg.reply pretty_json item
    #ordrin.restaurant.getDeliveryList new Date, address, unlessErr msg,
    #  (rs) -> getRestaurantFromFuzz msg.match[1], rs, msg, print_restaurants,
    #    (r) -> msg.reply pretty_json r

  robot.respond /food me/i, (msg) ->
    ordrin.restaurant.getDeliveryList new Date, address, unlessErr msg, (res) ->
      msg.send print_restaurants res

  robot.respond /ordrin(.*)/i, (msg) ->
    state = new_state()
    ordrin.restaurant.getDeliveryList new Date, address, unlessErr msg, (rs) ->
      getRestaurantFromFuzz msg.match[1], rs, msg, print_restaurants, (r) ->
        ordrin.restaurant.getDetails r.id, unlessErr msg, (r) ->
          state.restaurant = r
          msg.send "Ordering from #{r.name}.\n" + print_menu r

  robot.respond /order me (.+)/i, (msg) ->
    if not state.restaurant?
      msg.reply "There is no order in progess. To start an order try `order from <restaurant_id>`"
    else
      state.confirmed = false
      item_id = msg.match[1]

      item = do ->
        for category in state.restaurant.menu
          for item in category.children
            if item.id == item_id
              return item
        null

      if not item?
        msg.reply "No item matched."
      else
        state.orders.push
          orderer: msg.message.user.name
          item: item
        msg.reply "Okay!"

  robot.respond /check order/i, (msg) ->
    state.confirmed = true
    msg.send print_order state.restaurant, state.orders

  robot.respond /order it/i, (msg) ->
    if not state.confirmed
      if state.restaurant?
        state.confirmed = true
        msg.send print_order state.restaurant, state.orders
      else
        msg.reply "There is no order in progess. To start an order try `order from <restaurant_id>`"
    else
      state.confirmed = false

      name = msg.message.user.name.split " "
      firstName = name[0]
      lastName = name[name.length-1]

      total = 0
      tray = {items: []}
      for order in state.orders
        total += parseFloat order.item.price
        tray.items.push trayItem order.item.id ,1
      tip = (total * 0.2).toFixed 2
     # msg.send "#{state.restaurant.rest_partner_id} #{pretty_json tray} #{tip} #{firstName} #{lastName} #{pretty_json address} #{total}"
     #ordrin.order.placeOrder state.restaurant, tray, tip, 'ASAP', firstName, lastName, address, creditCard, user, createUser, callback

  robot.respond /edit distance ([^ ]*) (.*)/i, (msg) ->
    msg.reply edit_distance msg.match[1], msg.match[2]

