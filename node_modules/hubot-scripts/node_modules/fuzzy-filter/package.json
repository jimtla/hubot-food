{
  "name": "fuzzy-filter",
  "version": "0.0.3",
  "description": "a browserify-compatible fuzzy string filtering function",
  "keywords": [
    "stratus",
    "fuzzy",
    "filter",
    "browserify"
  ],
  "homepage": "https://github.com/stratuseditor/fuzzy-filter",
  "bugs": {
    "url": "https://github.com/stratuseditor/fuzzy-filter/issues"
  },
  "author": {
    "name": "sentientwaffle",
    "url": "http://sentientwaffle.github.com/"
  },
  "main": "./index",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/stratuseditor/fuzzy-filter.git"
  },
  "devDependencies": {
    "should": "0.6.x",
    "mocha": "1.x.x"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "readme": "# Fuzzy-filter\n\n[![Build Status](https://secure.travis-ci.org/stratuseditor/fuzzy-filter.png)](http://travis-ci.org/stratuseditor/fuzzy-filter)\n\nA [browserify](https://github.com/substack/node-browserify)-compatible\nfuzzy string filtering function.\n\nUsed by [Stratus Editor](http://stratuseditor.com/) for the Snap Open plugin.\n\n# Parameters\n\n    pattern - The fuzzy String to match against.\n    items   - An Array of String.\n    options - (optional)\n            * pre         - String to insert before matching text.\n            * post        - String to insert after matching text.\n            * limit       - Integer maximum number of results.\n            * separator   - String separator. Match against the last\n                            section of the String by default.\n            * ignorecase  - Boolean (default: true).\n            * ignorespace - Boolean (default: true).\n            * separate    - Boolean (default: false). If set to true, the\n                            function returns an array of an array of strings,\n                            where each array is\n                            [beforeLastSeparator, afterLastSeparator].\n                            If set, `separator` must also be passed.\n\nNote: If `pre` is passed, you also have to pass `post` (and vice-versa).\n\n# Examples\n## Simple usage\n\n    var fuzzy = require('fuzzy-filter')\n    fuzzy(\"cs\", [\"cheese\", \"pickles\", \"crackers\", \"pirate attack\", \"cs!!\"])\n    // => [\"cs!!\", \"cheese\", \"crackers\"]\n\n## Highlight match\n\n    fuzzy(\"cs\", [\"cheese\", \"pickles\", \"crackers\", \"pirate attack\", \"cs!!\"],\n      { pre:  \"<b>\"\n      , post: \"</b>\" })\n    // => [\"<b>cs</b>!!\", \"<b>c</b>hee<b>s</b>e\", \"<b>c</b>racker<b>s</b>\"]\n\n## Separator\n\n    fuzzy(\"cs\", [\"cookies\", \"cheese/pie\", \"fried/cheese\", \"cheese/cookies\"],\n      { pre:       \"<b>\"\n      , post:      \"</b>\"\n      , separator: \"/\" })\n    // => [ \"<b>c</b>ookie<b>s</b>\"\n    //    , \"fried/<b>c</b>hee<b>s</b>e\"\n    //    , \"cheese/<b>c</b>ookie<b>s</b>\" ]\n\n    fuzzy(\"cs/\", [\"cookies\", \"cheese/pie\", \"fried/cheese\", \"cheese/cookies\"],\n      { pre:       \"<b>\"\n      , post:      \"</b>\"\n      , separator: \"/\"})\n    // => [ \"<b>c</b>hee<b>s</b>e/pie\"\n    //    , \"<b>c</b>hee<b>s</b>e/cookies\" ]\n  \n    fuzzy(\"cs/p\", [\"cookies\", \"cheese/pie\", \"fried/cheese\", \"cheese/cookies\"],\n      { pre:       \"<b>\"\n      , post:      \"</b>\"\n      , separator: \"/\"})\n    // => [\"<b>c</b>hee<b>s</b>e/<b>p</b>ie\"]\n  \n    fuzzy(\"cs/p\", [\"cookies\", \"cheese/pie\", \"fried/cheese\", \"cheese/cookies\"],\n      { pre:       \"<b>\"\n      , post:      \"</b>\"\n      , separator: \"/\"\n      , separate:  true })\n    // => [ [\"<b>c</b>hee<b>s</b>e\", \"<b>p</b>ie\"] ]\n\n\n# License\nSee LICENSE.\n\n",
  "_id": "fuzzy-filter@0.0.3",
  "dist": {
    "shasum": "7f8816b9becf89efeb4f4b2dda8da5dd0167a0db"
  },
  "_from": "fuzzy-filter@0.0.3"
}
