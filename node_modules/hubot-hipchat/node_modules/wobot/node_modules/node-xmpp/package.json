{
  "name": "node-xmpp",
  "version": "0.3.2",
  "main": "./lib/node-xmpp",
  "description": "Idiomatic XMPP client, component & server library for node.js",
  "author": {
    "name": "Stephan Maka"
  },
  "dependencies": {
    "node-expat": ">=1.4.1",
    "ltx": ">= 0.1.1"
  },
  "devDependencies": {
    "node-stringprep": ">=0.1.0",
    "vows": ">=0.5.12"
  },
  "repositories": [
    {
      "type": "git",
      "path": "git://github.com/astro/node-xmpp.git"
    }
  ],
  "homepage": "http://github.com/astro/node-xmpp",
  "bugs": "http://github.com/astro/node-xmpp/issues",
  "maintainers": [
    {
      "name": "Astro",
      "email": "astro@spaceboyz.net",
      "url": "http://spaceboyz.net/~astro/"
    }
  ],
  "contributors": [
    {
      "name": "Stephan Maka"
    },
    {
      "name": "Derek Hammer"
    },
    {
      "name": "Daniel Zelisko"
    },
    {
      "name": "Michael Geers"
    },
    {
      "name": "Nolan Darilek"
    },
    {
      "name": "Nathan Rajlich"
    },
    {
      "name": "Dhruv Matani"
    },
    {
      "name": "Camilo Aguilar"
    },
    {
      "name": "Henry Chan"
    },
    {
      "name": "Justin Campbell"
    },
    {
      "name": "Trent Mick"
    },
    {
      "name": "Alexey Shamrin"
    },
    {
      "name": "Sonny Piers"
    },
    {
      "name": "Chaitanya Gupta"
    },
    {
      "name": "Иван"
    },
    {
      "name": "Julien Genestoux"
    }
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "engine": "node >=0.4.0",
  "scripts": {
    "test": "vows --spec"
  },
  "readme": "# node-xmpp\n\nidiomatic XMPP library for [node.js](http://nodejs.org/)\n\n\n## Installation\n\nWith package manager [npm](http://npmjs.org/):\n\n    npm install node-xmpp\n\n\n## Objectives of *node-xmpp:*\n\n* Use node.js conventions, especially `EventEmitter`, ie. for write\n  buffer control\n* Fast parsing, `node-expat` was written for this library\n* Client support for both XMPP clients and components\n* Optional server infrastructure with `Router`\n* After authentication, leave trivial protocol bits to the user, that\n  is XML handling according to any\n  [XEP](http://xmpp.org/xmpp-protocols/xmpp-extensions/)\n\n\n## Features\n\n* Client authentication with SASL DIGEST-MD5, PLAIN, ANONYMOUS, X-FACEBOOK-PLATFORM\n* `_xmpp-client._tcp` SRV record support\n* Simple JID parsing with Stringprep normalization\n  * Optional now, you won't need ICU for just node-xmpp\n  * Please be aware if you identify users by JIDs\n  * `npm install node-stringprep`\n* Uses [ltx](http://github.com/astro/ltx)\n  * Much easier to handle than a standard DOM\n  * xmlns-aware\n  * Easy XML builder like Strophe.js (see down)\n  * Non-buffering serialization\n  * Was split out of node-xmpp for modularization and resuability\n* [Component](http://xmpp.org/extensions/xep-0114.html) connections\n* Run your own server/talk to other servers with `xmpp.Router`\n\n\n## Dependencies\n\n* [node-expat](http://github.com/astro/node-expat)\n* [ltx](http://github.com/astro/ltx)\n\nOptional\n\n* [node-stringprep](http://github.com/astro/node-stringprep): for [icu](http://icu-project.org/)-based string normalization.\n\n\n## Related Libraries\n\n* [node-xmpp-bosh](http://code.google.com/p/node-xmpp-bosh/): BOSH & websocket server (connection manager)\n* [node-xmpp-via-bosh](https://github.com/anoopc/node-xmpp-via-bosh/): BOSH client connections from node.js\n* [node-simple-xmpp](https://github.com/arunoda/node-simple-xmpp/): Simpler high-level client layer\n* [xmpp-server](https://github.com/superfeedr/xmpp-server/): Reusable XMPP server on top of node-xmpp\n\n\n## Design\n\nInheritance tree and associations:\n\n    ┌────────────┐1     1┌────────────┐\n    │ net.Stream ├───────┤ Connection │\n    └────────────┘       └────────────┘\n                               ↑\n          ┌────────────┬───────┴───┬────────────┐\n          │            │           │            │\n    ┏━━━━━┷━━━━┓ ┏━━━━━┷━━━━━┓ ┌───┴────┐ ┌─────┴─────┐\n    ┃  Client  ┃ ┃ Component ┃ │ Server │ │ C2SStream │\n    ┗━━━━━━━━━━┛ ┗━━━━━━━━━━━┛ └────────┘ └───────────┘\n                                   ↑            ↑0..*\n             ┌─────────────────────┤            │accepts\n             │                     │            │1\n    ┌────────┴───────┐ ┌───────────┴────┐ ┏━━━━━┷━━━━━┓\n    │ OutgoingServer │ │ IncomingServer │ ┃ C2SServer ┃\n    └─────────────┬──┘ └───┬────────────┘ ┗━━━━━┯━━━━━┛\n             0..* │        │ 0..*               │\n          creates │        │ accepts            │\n                 ┏┷━━━━━━━━┷┓                   │\n                 ┃  Router  ┃←──────────────────┘\n                 ┗━━━━━━━━━━┛ 1\n\n\nThis foundation is complemented by two basic data structures:\n\n* *JID:* a Jabber-Id, represented as a triple of `user`, `domain`,\n   `resource`\n* *Element:* any XML Element\n\n\n### Building XML Elements\n\nStrophe.js' XML Builder is very convenient for producing XMPP\nstanzas. ltx includes it in a much more primitive way: the\n`c()`, `cnode()` and `t()` methods can be called on any *Element*\nobject, returning the new child element.\n\nThis can be confusing: in the end, you will hold the last-added child\nuntil you use `up()`, a getter for the parent. `Connection.send()`\nfirst invokes `tree()` to retrieve the uppermost parent, the XMPP\nstanza, before sending it out the wire.\n\n\n## TODO\n\n* More documentation\n* More tests (Using [Vows](http://vowsjs.org/))\n",
  "_id": "node-xmpp@0.3.2",
  "dist": {
    "shasum": "01d6e6c9b5206cf8fbb32a0d2b50adc91d5360b3"
  },
  "_from": "node-xmpp@>= 0.2.7"
}
